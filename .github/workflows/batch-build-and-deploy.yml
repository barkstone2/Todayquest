name: 배치 애플리케이션 빌드 & 배포

on:
  push:
    tags:
      - batch-v*

env:
  JAVA_PATH: /home/runner/jdk
  GRADLE_USER_HOME: /home/runner/gradle

run-name: '[빌드 & 배포] For "${{ github.ref_name }}"'

jobs:
  build-and-delivery:
    name: 그래들 빌드 & 푸쉬 도커 이미지
    runs-on: ubuntu-latest
    steps:
      - id: jdk-install
        name: 자바 설치
        run: |
          mkdir -p ${{ env.JAVA_PATH }}
          wget -q https://corretto.aws/downloads/latest/amazon-corretto-17-x64-linux-jdk.tar.gz
          tar -xzvf *-jdk.tar.gz -C ${{ env.JAVA_PATH }}
      - name: 자바 환경변수 세팅
        run: |
          echo "JAVA_HOME=$(find ${{ env.JAVA_PATH }} -type d -name '*corretto-17*')" >> $GITHUB_ENV
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v3
      - name: 그래들 빌드
        run: |
          ./gradlew batch:build -x test

      - name: 도커 허브 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: 도커 이미지 빌드 & 푸쉬
        run: |
          docker build -t barkstone2/dailyquest-batch:${GITHUB_REF#refs/tags/batch-} ./batch/
          docker push barkstone2/dailyquest-batch:${GITHUB_REF#refs/tags/batch-}

  deployment:
    name: EC2 배포
    runs-on: ubuntu-latest
    needs: build-and-delivery
    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v3
      - name: AWS 인증 구성
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: 버전 정보 생성
        run: |
          cd ./batch/deploy
          echo ${GITHUB_REF#refs/tags/batch-} > version.txt
      - name: CodeDeploy 푸쉬
        run: |
          aws deploy push \
            --application-name dailyquest-batch \
            --s3-location s3://dailyquest-store/deploy/batch/dailyquest-batch-${GITHUB_REF#refs/tags/batch-}.tar \
            --source ./batch/deploy
      - name: CodeDeploy 배포
        run: |
          aws deploy create-deployment \
            --application-name dailyquest-batch \
            --deployment-group-name dailyquest-batch-group \
            --s3-location bucket=dailyquest-store,key=deploy/batch/dailyquest-batch-${GITHUB_REF#refs/tags/batch-}.tar,bundleType=zip

  fail-slack-message:
    name: 파이프라인 실패 알림
    runs-on: ubuntu-latest
    needs: deployment
    if: failure()
    steps:
      - name: 실패 메시지 가공
        id: create-message
        run: |
          MESSAGE=$(echo "${{ github.event.head_commit.message }}" | head -n 1)
          echo "fail_message=$MESSAGE" >> "$GITHUB_OUTPUT"
      - name: 슬랙 메시지 전송
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "<!channel> ❗️[${{ github.workflow }}] Failure: For \"${{ steps.create-message.outputs.fail_message }}\""
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}